/// <reference types="node" />
import { inspect } from "util";
export declare type Value = string | number | boolean | object | null | undefined;
export declare type RawValue = Value | Sql;
/**
 * A SQL instance can be nested within each other to build SQL strings.
 */
export declare class Sql {
    values: Value[];
    strings: string[];
    constructor(rawStrings: ReadonlyArray<string>, rawValues: ReadonlyArray<RawValue>);
    get text(): string;
    get sql(): string;
    [inspect.custom](): {
        text: string;
        sql: string;
        values: Value[];
    };
}
/**
 * Create a SQL query for a list of values.
 */
export declare function join(values: RawValue[], separator?: string): Sql;
/**
 * Create raw SQL statement.
 */
export declare function raw(value: string): Sql;
/**
 * Placeholder value for "no text".
 */
export declare const empty: Sql;
/**
 * Create a SQL object from a template string.
 */
export declare function sqltag(strings: ReadonlyArray<string>, ...values: RawValue[]): Sql;
/**
 * Standard `sql` tag.
 */
export default sqltag;
