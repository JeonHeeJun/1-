"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("util");
const index_1 = __importStar(require("./index"));
describe("sql template tag", () => {
    it("should generate sql", () => {
        const query = index_1.default `SELECT * FROM books`;
        expect(query.sql).toEqual("SELECT * FROM books");
        expect(query.text).toEqual("SELECT * FROM books");
        expect(query.values).toEqual([]);
    });
    it("should store values", () => {
        const name = "Blake";
        const query = index_1.default `SELECT * FROM books WHERE author = ${name}`;
        expect(query.sql).toEqual("SELECT * FROM books WHERE author = ?");
        expect(query.text).toEqual("SELECT * FROM books WHERE author = $1");
        expect(query.values).toEqual([name]);
    });
    it("should build sql with child sql statements", () => {
        const subquery = index_1.default `SELECT id FROM authors WHERE name = ${"Blake"}`;
        const query = index_1.default `SELECT * FROM books WHERE author_id IN (${subquery})`;
        expect(query.text).toEqual("SELECT * FROM books WHERE author_id IN (SELECT id FROM authors WHERE name = $1)");
        expect(query.values).toEqual(["Blake"]);
    });
    it("should not cache values for mysql compatibility", () => {
        const ids = [1, 2, 3];
        const query = index_1.default `SELECT * FROM books WHERE id IN (${index_1.join(ids)}) OR author_id IN (${index_1.join(ids)})`;
        expect(query.sql).toEqual("SELECT * FROM books WHERE id IN (?,?,?) OR author_id IN (?,?,?)");
        expect(query.text).toEqual("SELECT * FROM books WHERE id IN ($1,$2,$3) OR author_id IN ($4,$5,$6)");
        expect(query.values).toEqual([1, 2, 3, 1, 2, 3]);
    });
    it('should provide "empty" helper', () => {
        const query = index_1.default `SELECT * FROM books ${index_1.empty}`;
        expect(query.sql).toEqual("SELECT * FROM books ");
        expect(query.text).toEqual("SELECT * FROM books ");
        expect(query.values).toEqual([]);
    });
    it("should throw in constructor with no strings", () => {
        expect(() => new index_1.Sql([], [])).toThrowError("Expected at least 1 string");
    });
    it("should throw when values is less than expected", () => {
        expect(() => new index_1.Sql(["", ""], [])).toThrowError("Expected 2 strings to have 1 values");
    });
    it("should inspect sql instance", () => {
        expect(util_1.inspect(index_1.default `SELECT * FROM test`)).toContain(`'SELECT * FROM test'`);
    });
    it("should have enumerable keys", () => {
        const query = index_1.default `SELECT COUNT(1)`;
        const keys = [];
        for (const key in query)
            keys.push(key);
        expect(keys).toEqual(["values", "strings", "text", "sql"]);
    });
    it("should handle escaped back ticks", () => {
        const query = index_1.default `UPDATE user SET \`name\` = 'Taylor'`;
        expect(query.text).toEqual("UPDATE user SET `name` = 'Taylor'");
    });
    describe("join", () => {
        it("should join list", () => {
            const query = index_1.join([1, 2, 3]);
            expect(query.text).toEqual("$1,$2,$3");
            expect(query.values).toEqual([1, 2, 3]);
        });
        it("should error joining an empty list", () => {
            expect(() => index_1.join([])).toThrowError(TypeError);
        });
    });
    describe("raw", () => {
        it("should accept any string", () => {
            const value = Math.random().toString();
            const query = index_1.raw(value);
            expect(query.sql).toEqual(value);
            expect(query.values).toEqual([]);
        });
    });
});
//# sourceMappingURL=index.spec.js.map