{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { inspect } from \"util\";\n\nexport type Value = string | number | boolean | object | null | undefined;\nexport type RawValue = Value | Sql;\n\n/**\n * A SQL instance can be nested within each other to build SQL strings.\n */\nexport class Sql {\n  values: Value[];\n  strings: string[];\n\n  constructor(\n    rawStrings: ReadonlyArray<string>,\n    rawValues: ReadonlyArray<RawValue>\n  ) {\n    let valuesLength = rawValues.length;\n    let stringsLength = rawStrings.length;\n\n    if (stringsLength === 0) {\n      throw new TypeError(\"Expected at least 1 string\");\n    }\n\n    if (stringsLength - 1 !== valuesLength) {\n      throw new TypeError(\n        `Expected ${stringsLength} strings to have ${stringsLength - 1} values`\n      );\n    }\n\n    for (const child of rawValues) {\n      if (child instanceof Sql) {\n        valuesLength += child.values.length - 1;\n        stringsLength += child.strings.length - 2;\n      }\n    }\n\n    this.values = new Array(valuesLength);\n    this.strings = new Array(stringsLength);\n\n    this.strings[0] = rawStrings[0];\n\n    // Iterate over raw values, strings, and children. The value is always\n    // positioned between two strings, e.g. `index + 1`.\n    let index = 1;\n    let position = 0;\n    while (index < rawStrings.length) {\n      const child = rawValues[index - 1];\n      const rawString = rawStrings[index++];\n\n      // Check for nested `sql` queries.\n      if (child instanceof Sql) {\n        // Append child prefix text to current string.\n        this.strings[position] += child.strings[0];\n\n        let childIndex = 0;\n        while (childIndex < child.values.length) {\n          this.values[position++] = child.values[childIndex++];\n          this.strings[position] = child.strings[childIndex];\n        }\n\n        // Append raw string to current string.\n        this.strings[position] += rawString;\n      } else {\n        this.values[position++] = child;\n        this.strings[position] = rawString;\n      }\n    }\n  }\n\n  get text() {\n    return this.strings.reduce(\n      (text, part, index) => `${text}$${index}${part}`\n    );\n  }\n\n  get sql() {\n    return this.strings.join(\"?\");\n  }\n\n  [inspect.custom]() {\n    return {\n      text: this.text,\n      sql: this.sql,\n      values: this.values,\n    };\n  }\n}\n\n// Work around MySQL enumerable keys in issue #2.\nObject.defineProperty(Sql.prototype, \"sql\", { enumerable: true });\nObject.defineProperty(Sql.prototype, \"text\", { enumerable: true });\n\n/**\n * Create a SQL query for a list of values.\n */\nexport function join(values: RawValue[], separator = \",\") {\n  if (values.length === 0) {\n    throw new TypeError(\n      \"Expected `join([])` to be called with an array of multiple elements, but got an empty array\"\n    );\n  }\n\n  return new Sql([\"\", ...Array(values.length - 1).fill(separator), \"\"], values);\n}\n\n/**\n * Create raw SQL statement.\n */\nexport function raw(value: string) {\n  return new Sql([value], []);\n}\n\n/**\n * Placeholder value for \"no text\".\n */\nexport const empty = raw(\"\");\n\n/**\n * Create a SQL object from a template string.\n */\nexport function sqltag(strings: ReadonlyArray<string>, ...values: RawValue[]) {\n  return new Sql(strings, values);\n}\n\n/**\n * Standard `sql` tag.\n */\nexport default sqltag;\n"]}